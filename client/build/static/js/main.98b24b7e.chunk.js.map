{"version":3,"sources":["utils/API.js","pages/AddProduct.js","components/ProductList/index.js","components/OrderTable/index.js","components/AllProductsContext/index.js","components/AuthContext/index.js","pages/Calculation.js","components/LoginForm/index.js","pages/Login.js","pages/NoMatch.js","components/Nav/index.js","App.js","index.js"],"names":["axios","get","productData","post","loginDetails","Content","Layout","Option","Select","AddProduct","useEffect","loadVendors","useState","vendors","setVendors","a","API","then","res","data","catch","err","console","log","layout","labelCol","lg","span","xl","wrapperCol","coefficientTooltip","style","minHeight","minWidth","marginTop","Provider","name","onFinish","product","formulation","message","success","key","user","mergeToPost","autoComplete","validateMessages","required","types","number","email","offset","Paper","variant","padding","color","fontFamily","Item","label","rules","Group","defaultChecked","buttonStyle","Button","value","type","min","htmlType","size","backgroundColor","borderColor","height","gutter","List","fields","add","remove","map","fieldKey","xs","xxl","elevation","marginBottom","onClick","block","icon","PlusOutlined","title","onConfirm","okText","cancelText","QuestionCircleOutlined","danger","placement","DeleteFilled","width","TextArea","resize","tooltip","formatter","replace","_","vendor","fontWeight","ToggledStyle","right","React","forwardRef","props","ref","Fragment","values","onclick","selectedPt","selectedQty","children","htmlFor","id","marginLeft","diplay","flexDirection","currentProduct","setData","vendorArray","pick","Form","useForm","form","editingKey","setEditingKey","isEditing","record","cancel","save","validateFields","row","newData","index","findIndex","item","splice","push","mergedColumns","dataIndex","editable","render","coefficient","InfoCircleOutlined","align","inputType","fixed","marginRight","Link","disabled","setFieldsValue","edit","EditTwoTone","twoToneColor","fontSize","paddingRight","matchingKeyData","filter","vendor_name","pickedData","rm","finalRowData","sumPrice","total_price","Number","reduce","accumulator","toFixed","today","Date","dd","String","getDate","padStart","mm","getMonth","yyyy","getFullYear","doc","jsPDF","addImage","setFontSize","text","line","setFont","autoTable","head","margin","top","left","columnStyles","0","halign","minCellWidth","1","2","3","4","5","footStyles","fillColor","body","embed","output","x","window","open","document","write","close","newPdf","FilePdfTwoTone","removedData","e","DeleteTwoTone","col","onCell","editing","component","components","cell","restProps","bordered","dataSource","columns","rowClassName","pagination","zIndex","createContext","AuthContext","isAuthenticated","setIsAuthenticated","Calculation","tailLayout","loadProducts","useRef","products","setProducts","setQuantity","setCurrentProduct","useSpring","to","opacity","from","config","duration","selectedP","selectedQ","warning","selectedProduct","forEach","quantity","qtyPerPack","unit","toUpperCase","unit_price","handleCalculation","md","dropdownMatchSelectWidth","dropdownRender","menu","flex","display","cursor","href","placeholder","isEmpty","onFinishFailed","className","initialValues","remember","border","prefix","UserOutlined","LockOutlined","Login","history","useHistory","loginData","response","_id","go","location","pathname","errorInfo","NoMatch","Nav","useContext","Sider","navItem","position","theme","breakpoint","collapsedWidth","onBreakpoint","broken","onCollapse","collapsed","App","exact","path","ReactDOM","getElementById"],"mappings":"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","file":"static/js/main.98b24b7e.chunk.js","sourcesContent":["import axios from \"axios\";\r\n\r\nexport default {\r\n    // Get all products\r\n    getProducts: function() {\r\n        return axios.get(\"/api/products\")\r\n\r\n    },\r\n    // Add new product\r\n    addProduct: function(productData) {\r\n        return axios.post(\"/api/products\", productData)\r\n    },\r\n    // User/Company Login\r\n    login: function(loginDetails) {\r\n        return axios.post(\"/api/user/login\", loginDetails)\r\n    },\r\n    // getUsers: function() {\r\n    //     return axios.get(\"/api/user\")\r\n    // }\r\n    userLoggedIn: function() {\r\n        return axios.get(\"/api/user/logged-in\")\r\n    },\r\n    // User/Company logout\r\n    logout: function () {\r\n        return axios.get(\"/api/user/logout\")\r\n    },\r\n    // Get all vendors\r\n    getVendors: function () {\r\n        return axios.get(\"api/vendors\")\r\n    }\r\n}","import React, { useState, useEffect }  from 'react';\r\nimport 'antd/dist/antd.css';\r\nimport './index.css';\r\nimport API from '../utils/API'\r\nimport { Form, Input, InputNumber, Button, message, Tooltip, Popconfirm, Radio, Layout, Row, Col, Select } from 'antd';\r\nimport { MinusCircleOutlined, PlusOutlined, QuestionCircleOutlined, DeleteFilled, InfoCircleOutlined } from '@ant-design/icons';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport ScrollUpButton from 'react-scroll-up-button'\r\nimport _ from 'lodash';\r\n\r\n\r\nconst { Content } = Layout;\r\nconst { Option } = Select;\r\nconst layout = {\r\n    labelCol: {\r\n      span: 6,\r\n    },\r\n    wrapperCol: {\r\n      span: 16,\r\n    },\r\n  };\r\nexport default function AddProduct () {\r\n\r\n    useEffect (() => {\r\n        loadVendors()\r\n    }, [])\r\n\r\n    // Set vendors \r\n    const [vendors, setVendors] = useState([])\r\n    async function loadVendors () {\r\n        API.getVendors ()\r\n        .then(res => {\r\n            setVendors(res.data);\r\n            }\r\n        )\r\n          .catch(err => console.log(err));\r\n    }\r\n    const layout = {\r\n        labelCol: {\r\n            lg:{span: 9},\r\n            xl:{span: 6}\r\n        },\r\n        wrapperCol: {\r\n          span: 24,\r\n        },\r\n      };\r\n    const validateMessages = {\r\n        required: '${label} is required!',\r\n        types: {\r\n          number: '${label} is not a valid number!',\r\n          email: '${label} is not a valid email!'\r\n        },\r\n        // number: {\r\n        //     range: '${label} must be between ${min} and ${max}',\r\n        //   },\r\n      };\r\n      let coefficientTooltip = \r\n      <span>\r\n        Weight unit in mg. <br/>\r\n        E.g.100mg per capsule, enter 100;<br/>\r\n        <br/>\r\n        For countable materials, divide by the dosage quantity in one package.<br/>\r\n        E.g if 1 bottle per 20 capsules, enter 0.05;<br/>\r\n      </span>\r\n      // Handles updating component state when the user types into the input field\r\n    //    function handleInputChange(event) {\r\n    //     const { name, value } = event.target;\r\n    //     setFormObject({...formObject, [name]: value})\r\n    //   };\r\n    \r\n    \r\n        const onFinish = ({product, formulation, ...rest}) => {\r\n\r\n            message.success(`${product.key} has been successfully added!`, 6)\r\n            // Initialize object to post\r\n            product.user = \"6093c20ad150a04ab444bc95\"\r\n            console.log(product)\r\n            const mergeToPost = {\r\n                ...product,\r\n                formulation:formulation\r\n            };\r\n\r\n            // console.log(mergeToPost);\r\n            API.addProduct(mergeToPost)\r\n                // .then(() => setFormObject({\r\n                    \r\n                    // }))\r\n                .then(() => console.log(\"done!\"))\r\n                .catch(err => console.log(err));\r\n            }\r\n            \r\n            \r\n\r\n          return (\r\n              \r\n              //<Form {...layout} name=\"product-form\" onFinish={onFinish} validateMessages={validateMessages}> \r\n        <Layout style={{ minHeight: '100vh',minWidth: '100vh' }}>\r\n           <Content style={{marginTop:\"3em\"}}> \r\n                    <Form.Provider>\r\n                            <Form {...layout} name=\"new-product-form\" onFinish={onFinish} autoComplete=\"off\" validateMessages={validateMessages}>\r\n                                    <Row>\r\n                                    <Col span={12} offset={6}>\r\n                                    {/* Product form */}\r\n                                        <Paper variant=\"outlined\" style={{padding: \"3em 6em\"}}>\r\n                                        {/* <div className = \"form-container\"> */}\r\n                                        <h1 style={{color: \"rgb(8, 105, 124)\", fontFamily:\"Arial\"}}>Product information:</h1>\r\n                                        <Form.Item\r\n                                            name={['product', 'key']}\r\n                                            label=\"Product Code\"\r\n                                            rules={[\r\n                                                {\r\n                                                    required: true,\r\n                                                },\r\n                                                ]}\r\n                                        >\r\n                                            <Input />\r\n                                        </Form.Item>\r\n                                        <Form.Item\r\n                                            name={['product', 'name']}\r\n                                            label=\"Name/Desc\"\r\n                                            rules={[\r\n                                                {\r\n                                                    required: true,\r\n                                                },\r\n                                                ]}\r\n                                        >\r\n                                            <Input />\r\n                                        </Form.Item>\r\n                                        <Form.Item\r\n                                            name={['product', 'packaging']}\r\n                                            label=\"Pakaging:\"\r\n                                            rules={[\r\n                                                {\r\n                                                    required: true,\r\n                                                },\r\n                                                ]}\r\n                                        >\r\n                                            <Radio.Group defaultChecked=\"a\" buttonStyle=\"solid\">\r\n                                                <Radio.Button value=\"a\">Bottle</Radio.Button>\r\n                                                <Radio.Button value=\"b\">Box (Blisters)</Radio.Button>\r\n                                            </Radio.Group>\r\n                                        </Form.Item>\r\n                                        <Form.Item\r\n                                            name={['product', 'dosageForm']}\r\n                                            label=\"Dosage Form\"\r\n                                            rules={[\r\n                                                {\r\n                                                    required: true,\r\n                                                },\r\n                                                ]}\r\n                                        >\r\n                                            <Radio.Group defaultChecked=\"a\" buttonStyle=\"solid\">\r\n                                                <Radio.Button value=\"a\">Tablet</Radio.Button>\r\n                                                <Radio.Button value=\"b\">Capsule</Radio.Button>\r\n                                            </Radio.Group>\r\n                                        </Form.Item>\r\n                                        <Form.Item\r\n                                            name={['product', 'qtyPerPack']}\r\n                                            label=\"Dose per pack\"\r\n                                            rules={[\r\n                                                {\r\n                                                    type: 'number',\r\n                                                    min: 0,\r\n                                                    required: true,\r\n                                                },\r\n                                                ]}\r\n                                        >\r\n                                            <InputNumber min='0'/>\r\n                                        </Form.Item>\r\n                                        <Col offset={20}>\r\n                                            <Button htmlType=\"submit\" size=\"large\" htmlType=\"submit\" style={{backgroundColor:\"rgb(8, 105, 124)\", color:\"white\", borderColor: \"rgb(8, 105, 124)\", height:\"4em\"}}>\r\n                                                Submit\r\n                                            </Button>\r\n                                        </Col>\r\n                                        {/* </div> */}\r\n                                        </Paper>\r\n                                        </Col>\r\n                                    </Row>\r\n                                    <Row>\r\n                                        {/* Formulation form */}\r\n                                        <Col span={12} offset={6}>\r\n                                        <Row gutter={10}>\r\n\r\n                                        <Form.List name=\"formulation\"  >\r\n                                    \r\n                                            {(fields, { add, remove }) => (\r\n                                                <>\r\n\r\n                                                {fields.map(({ key, name, fieldKey, ...restField }) => (\r\n                                                    // <Col md={{ span:12, offset:6}} xxl={{ span:6, offset:4 }}>\r\n                                                    <Col xs={{span:24}} xxl={{ span:12 }} key={key}>\r\n                                                        <Paper elevation={7} style={{ padding:\"3em\", marginTop:\"2em\", minWidth:'100%'}}>\r\n                                                        <Button type=\"primary\" style={{backgroundColor: \"rgb(8, 105, 124)\", borderColor:\"rgb(8, 105, 124)\", marginBottom:\"1em\"}} onClick={() => add()} block icon={<PlusOutlined />}>\r\n                                                            Add Raw Material\r\n                                                        </Button>\r\n                                                            <Popconfirm title={\"Are you sure? \"}onConfirm={() => remove(name)} okText=\"Yes\" cancelText=\"No\" icon={<QuestionCircleOutlined style={{ color: 'red' }} />}>\r\n                                                                <Button type=\"primary\" danger placement=\"right\" icon={<DeleteFilled />} style={{width:\"100%\", marginBottom:\"2em\"}} >\r\n                                                                    Delete\r\n                                                                </Button>\r\n                                                            </Popconfirm>\r\n                                                            <h3 style={{color: \"rgb(8, 105, 124)\", fontFamily:\"Arial\"}}>Material information:</h3>\r\n                                                        \r\n                                                            <Form.Item \r\n                                                            \r\n                                                            name={[name, 'key']}\r\n                                                            label=\"Code\"\r\n                                                            rules={[\r\n                                                                {\r\n                                                                    required: true,\r\n                                                                    message: \"Raw Material Code is required\"\r\n                                                                },\r\n                                                                ]}\r\n                                                            >\r\n                                                            <Input />\r\n                                                            </Form.Item>\r\n                                                            <Form.Item\r\n                                                            name={[name, 'name']}\r\n                                                            label=\"Name/Desc\"\r\n                                                            rules={[\r\n                                                                {\r\n                                                                    required: true,\r\n                                                                    message: \"Name and/or description is required\"\r\n                                                                },\r\n                                                                ]}\r\n                                                            >\r\n                                                            <Input.TextArea style={{resize:\"both\"}}/>\r\n\r\n                                                            </Form.Item>\r\n                                                            \r\n                                                            <Form.Item\r\n                                                            name={[name, 'unit']}\r\n                                                            label=\"Unit\"\r\n                                                            tooltip=\"Note: weight in kg\"\r\n                                                            rules={[\r\n                                                                {\r\n                                                                    required: true,\r\n                                                                },\r\n                                                                ]}\r\n                                                            >\r\n                                                            <Input />\r\n                                                            </Form.Item>\r\n                                                            <Form.Item\r\n                                                            name={[name, 'unit_price']}\r\n                                                            label=\"Rate (AUD)\"\r\n                                                            rules={[\r\n                                                                {\r\n                                                                    type: 'number',\r\n                                                                    min: 0,\r\n                                                                    required: true,\r\n                                                                },\r\n                                                                ]}\r\n                                                            >\r\n                                                            <InputNumber min='0' formatter={value => `$ ${value}`.replace(/\\B(?=(\\d{3})+(?!\\d))/g, ',')}/>\r\n                                                            </Form.Item>\r\n                                                            <Form.Item\r\n                                                            name={[name, 'coefficient']}\r\n                                                            label=\"Qty/dose\"\r\n                                                            rules={[\r\n                                                                {\r\n                                                                    type: 'number',\r\n                                                                    min: 0,\r\n                                                                    required: true,\r\n                                                                },\r\n                                                                ]}\r\n                                                            tooltip={coefficientTooltip}\r\n                                                            >\r\n                                                            <InputNumber min='0'/>\r\n                                                            </Form.Item>\r\n\r\n\r\n                                                            <Form.Item\r\n                                                            name={[name, 'vendor_name']}\r\n                                                            label=\"Vendor\"\r\n                                                            rules={[\r\n                                                                {\r\n                                                                    required: true,\r\n                                                                },\r\n                                                                ]}\r\n                                                            >\r\n                                                            <Select>\r\n                                                                {_.map(vendors, (vendor => (\r\n                                                                <Option key={vendor.name}>{vendor.name}</Option>\r\n                                                                )))}\r\n                                                            </Select>\r\n                                                            </Form.Item>\r\n                                                        </Paper>  \r\n\r\n                                                    </Col>\r\n                                                ))}\r\n                                                    <Col span={12}>\r\n                                                    <Button type=\"dashed\" onClick={() => add()} block icon={<PlusOutlined />}  style={{fontWeight:\"bold\", color: \"rgb(8, 105, 124)\", borderColor: \"rgb(8, 105, 124)\"}} >\r\n                                                        Add Raw Material\r\n                                                    </Button>\r\n                                                    </Col>\r\n\r\n                                            </>\r\n                                            )}\r\n                                        </Form.List>\r\n                                        \r\n                                        </Row>\r\n                                        </Col>\r\n                                    </Row>\r\n                                    <Row>\r\n                                        <Form.Item wrapperCol={{ ...layout.wrapperCol, offset: 8 }}>\r\n\r\n                                            <ScrollUpButton style={{width: \"5%\", height:\"5\", backgroundColor:\"rgb(8, 105, 124)\"}} ToggledStyle={{right: \"10%\"}} />\r\n                                        </Form.Item>\r\n                                    </Row>\r\n\r\n                            </Form>\r\n                        \r\n                    </Form.Provider>  \r\n            \r\n            </Content>\r\n        </Layout>\r\n    );\r\n    \r\n}   ","import React from 'react';\r\nimport {Button, Form, Select, InputNumber} from 'antd';\r\n\r\n// export const ProductList = \r\nexport const ProductForm = \r\nReact.forwardRef((props,ref) => {\r\n    console.log(props)\r\n    const onFinish = (values) => {\r\n        console.log(values);\r\n      };\r\n    return (\r\n    <React.Fragment>\r\n        <Form onFinish={(values) => {props.onclick(values.selectedPt, values.selectedQty)}}>\r\n            <Form.Item name=\"selectedPt\">\r\n            <Select ref={ref}>\r\n            {props.children.map(product => (\r\n                <Select.Option key={product.key}>{product.key}</Select.Option>\r\n            ))}\r\n            </Select>\r\n            </Form.Item>\r\n            <Form.Item name=\"selectedQty\">\r\n                <InputNumber/>\r\n            </Form.Item>\r\n            <Form.Item>\r\n            <Button htmlType=\"submit\" >\r\n                Calculate\r\n            </Button>\r\n            </Form.Item>\r\n        </Form>\r\n    </React.Fragment>\r\n\r\n    )\r\n\r\n    // return (\r\n    //     <React.Fragment>\r\n    //         <label htmlFor=\"select-product\" ><strong>Select Product: </strong></label>\r\n    //         <select id=\"select-product\" ref={ref} style={{marginLeft:\"0.5em\", diplay:\"flex\", flexDirection:\"row\"}}>{children} </select>\r\n    //     </React.Fragment>\r\n    // )\r\n})\r\n\r\nexport const ProductList = \r\nReact.forwardRef(({children},ref) => {\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <label htmlFor=\"select-product\" ><strong>Select Product: </strong></label>\r\n            <select id=\"select-product\" ref={ref} style={{marginLeft:\"0.5em\", diplay:\"flex\", flexDirection:\"row\"}}>{children} </select>\r\n        </React.Fragment>\r\n    )\r\n})\r\n\r\nexport function ProductListItem({children}) {\r\n    return <option>{children.key}</option>\r\n}\r\n\r\n\r\nexport const ProductQtyInput =\r\n React.forwardRef((props, ref) => {\r\n        return (\r\n        <div>\r\n        <strong>Number of Packages:</strong><input id=\"productQty\" ref={ref} style={{marginLeft:\"0.5em\"}}></input> \r\n        </div>\r\n        )\r\n\r\n    })\r\n\r\n\r\nexport function SetProductBtn(props) {\r\n    return (\r\n            <Button className=\"setProduct\"{...props}>Calculate</Button>\r\n    )\r\n}","import React, { useState, useEffect, useContext } from 'react';\r\nimport 'antd/dist/antd.css';\r\nimport './index.css';\r\nimport {InfoCircleOutlined, EditTwoTone, FilePdfTwoTone, DeleteTwoTone} from '@ant-design/icons';\r\nimport { Tooltip,Table, Input, InputNumber, Popconfirm, Form, Typography, Select, Button } from 'antd';\r\nimport API from \"../../utils/API\"\r\nimport { jsPDF } from \"jspdf\";\r\nimport _ from \"lodash\";\r\nimport 'jspdf-autotable'\r\n\r\nconst {Option} = Select;\r\n\r\nexport default function ({children}) {\r\n console.log(children[0].currentProduct)\r\n  const [data, setData] = useState(children[0].currentProduct.formulation)\r\n  useEffect (() => {\r\n    setData(children[0].currentProduct.formulation)\r\n  }, children)\r\n\r\n  // Get vendor names in an array\r\n  const vendorArray = _.map(children[0].vendors, (vendor => {return _.pick(vendor, ['name', 'contact_email'])}))\r\nconst EditableCell = ({\r\n  editing,\r\n  dataIndex,\r\n  title,\r\n  inputType,\r\n  record,\r\n  index,\r\n  children,\r\n  ...restProps\r\n}) => {\r\n  const inputNode = inputType === 'number' ? <InputNumber /> : <Input />;\r\n  return (\r\n    <td {...restProps}>\r\n      {editing ? (\r\n        <Form.Item\r\n          name={dataIndex}\r\n          style={{\r\n            margin: 0,\r\n          }}\r\n        >\r\n          {dataIndex === 'vendor_name'? \r\n          <Select>\r\n            {_.map(vendorArray, (vendor => (\r\n              <Option key={vendor.name}>{vendor.name}</Option>\r\n            )))}\r\n          </Select>:\r\n          dataIndex === 'total_price' ? <InputNumber style={{width: '15em'}}/> : <Input/>\r\n \r\n        }\r\n        </Form.Item>\r\n      ) : (\r\n        children\r\n      )}\r\n    </td>\r\n  );\r\n};\r\n\r\n\r\n\r\n\r\n  \r\n  const [form] = Form.useForm();\r\n  const [editingKey, setEditingKey] = useState('');\r\n\r\n\r\n  const isEditing = (record) => record.key === editingKey;\r\n\r\n  const edit = (record) => {\r\n    form.setFieldsValue({\r\n      ...record,\r\n    });\r\n    setEditingKey(record.key);\r\n  };\r\n  // Current date\r\n\r\n  // works with one product:\r\n  // const newPdf = ({coefficient,vendor_email,vendor_name, ...rest}) => {\r\n    const newPdf = (props) => {\r\n      console.log(data)\r\n      console.log(props)\r\n      // Remove RMs with different vendor than the one clicked on, this allows all RMs to be printed on one PO\r\n      const matchingKeyData = _.filter(data, ['vendor_name', props.vendor_name])\r\n      // Pick out properties to be printed on the PO\r\n      const pickedData = _.map(matchingKeyData, (rm => { return _.pick(rm, ['key','name', 'quantity', 'unit', 'unit_price', 'total_price'])}))     \r\n      // Extract data values to arrays to populate on the PO\r\n      const finalRowData = _.map(pickedData,(rm => {return _.map(rm,(value=> {return value}))}))   \r\n      // Convert total_price from string to numbers\r\n      const numberedTotalData = _.map(pickedData, rm => {return rm.total_price = Number(rm.total_price)})\r\n      // Sum total price\r\n      const reducer = (accumulator, item) => {\r\n        return accumulator + item;\r\n      };\r\n      const sumPrice = numberedTotalData.reduce(reducer)\r\n      // Push the total price as the last row of the table\r\n      finalRowData.push(['','','','','Total All',sumPrice.toFixed(2)])\r\n\r\n    var today = new Date();\r\n    var dd = String(today.getDate()).padStart(2, '0');\r\n    var mm = String(today.getMonth() + 1).padStart(2, '0'); //January is 0!\r\n    var yyyy = today.getFullYear();\r\n    today = dd + '/' + mm + '/' + yyyy;\r\n\r\n    // Initialize pdf\r\n  const doc = new jsPDF();\r\ndoc.addImage(\"examples/images/Octonyan.jpg\", \"JPEG\", 20, 12, 23, 23); \r\ndoc.setFontSize(22);\r\ndoc.text(\"My Company Name Pty Ltd\", 55, 19, null, null, \"left\");\r\ndoc.setFontSize(16);\r\ndoc.text(\"23 Company St, Suburb, NSW, Australia\", 55, 27, null, null, \"left\");\r\ndoc.text(\"myemail@company.com\", 55, 35, null, null, \"left\");\r\ndoc.line(17, 37, 188,37)\r\n\r\n\r\ndoc.setFont(\"helvetica\", \"bold\");\r\ndoc.text(\"To:\", 25, 45);\r\ndoc.setFont(\"helvetica\", \"normal\");\r\n\r\n  doc.text(props.vendor_name, 25, 53);\r\n  \r\n  // let vendorEmail;\r\n\r\n  // vendorArray.forEach(vendor => {\r\n  //   console.log(vendor)\r\n  //   console.log(props.vendor_name)\r\n  //   console.log(vendor.contact_email)\r\n  //   if (vendor.name === props.vendor_name) {\r\n  //     console.log(vendor.contact_email)\r\n  //     return vendorEmail = vendor.contact_email;\r\n  //   };\r\n  // });\r\n\r\n  // console.log(vendorEmail)\r\n  // doc.text(vendorEmail, 25, 61);\r\n\r\n  doc.text(`Order date: ${today}`, 110, 45);\r\n  doc.text(\"PO #: 12345678\", 110, 53);\r\n\r\n  doc.autoTable({\r\n    head: [['Our Ref', 'Name', 'Quantity', 'Unit', 'Rate', 'Total Price']],\r\n    margin: { top: 65 , left: 20.2, right: 22.4},\r\n    columnStyles: { \r\n      0: { halign: 'center', minCellWidth: 8 }, \r\n      1: { halign: 'center', minCellWidth: 30},\r\n      2: { halign: 'center', minCellWidth: 10},\r\n      3: { halign: 'center', minCellWidth: 5},\r\n      4: { halign: 'center', minCellWidth: 10},\r\n      5: { halign: 'right'}\r\n    },\r\n    footStyles: {fillColor:[255, 0, 0]},\r\n    body: finalRowData,\r\n  })\r\n\r\n\r\n    // Open document in new tab\r\n    var string = doc.output('datauristring');\r\n    var embed = \"<embed width='100%' height='100%' src='\" + string + \"'/>\"\r\n    var x = window.open();\r\n    x.document.open();\r\n    x.document.write(embed);\r\n    x.document.close();\r\n    \r\n  }\r\n\r\n  const cancel = () => {\r\n    setEditingKey('');\r\n  };\r\n  \r\n  // Save new record\r\n  const save = async (key) => {\r\n    try {\r\n      const row = await form.validateFields();\r\n      const newData = [...data];\r\n      // find the index of the modified value\r\n      const index = newData.findIndex((item) => key === item.key);\r\n      // replace the properties with the new values\r\n      if (index > -1) {\r\n        const item = newData[index];\r\n        newData.splice(index, 1, { ...item, ...row });\r\n        setData(newData);\r\n        setEditingKey('');\r\n      } else {\r\n      // If new row of data, add it to the original data set\r\n        newData.push(row);\r\n        setData(newData);\r\n        setEditingKey('');\r\n      }\r\n    } catch (errInfo) {\r\n      console.log('Validate Failed:', errInfo);\r\n    }\r\n  };\r\n\r\n  // Remove a raw material from the data and set new state for data\r\n  const remove = (row) => {\r\n    // remove by matching key\r\n    const removedData = data.filter(e => e.key != row.key);\r\n    setData(removedData)\r\n  }\r\n\r\n  const columns = [\r\n    {\r\n      title: 'RM Code',\r\n      dataIndex: 'key',\r\n      width: '10%',\r\n      editable: true,\r\n      render: (key, row) => {\r\n        return (\r\n        <Tooltip title = {`Coefficient: ${row.coefficient}`}> {key}\r\n        <InfoCircleOutlined />\r\n        </Tooltip>\r\n        )\r\n      },\r\n    },\r\n    {\r\n      title: 'Name and Description',\r\n      dataIndex: 'name',\r\n      width: '25%',\r\n      editable: true,\r\n    },\r\n    {\r\n      title: 'Vendor',\r\n      dataIndex: 'vendor_name',\r\n      width: '20%',\r\n      editable: true,\r\n    },\r\n    {\r\n      title: 'Quantity',\r\n      dataIndex: 'quantity',\r\n      width: '10%',\r\n      editable: true,\r\n      align:'right'\r\n    },\r\n    {\r\n      title: 'Unit',\r\n      dataIndex: 'unit',\r\n      width: '5%',\r\n      editable: true,\r\n      align:'right'\r\n    },   \r\n    {\r\n      title: 'Rate',\r\n      dataIndex: 'unit_price',\r\n      width: '10%',\r\n      editable: true,\r\n      align:'right'\r\n    },\r\n \r\n    {\r\n      title: 'Total Price (AUD)',\r\n      dataIndex: 'total_price',\r\n      inputType: 'number',\r\n      width: '10%',\r\n      editable: true,\r\n      align:'right'\r\n    },\r\n\r\n    {\r\n      title: 'Actions',\r\n      dataIndex: 'actions',\r\n      width: '15%',\r\n      fixed: 'right',\r\n      render: (_, record) => {\r\n        const editable = isEditing(record);\r\n        \r\n        return editable ? (\r\n          <span>\r\n            <a\r\n              onClick={() => save(record.key)}\r\n              style={{\r\n                marginRight: 8,\r\n                color: \"dodgerblue\"\r\n              }}\r\n            >\r\n              Save\r\n            </a>\r\n            <Popconfirm title=\"Sure to cancel?\" onConfirm={cancel} okText=\"Yes\" cancelText=\"No\">\r\n              <a>Cancel</a>\r\n            </Popconfirm>\r\n          </span>\r\n        ) : (\r\n          <span>\r\n          <Typography.Link disabled={editingKey !== ''} onClick={() => edit(record)} style={{color: \"dodgerblue\"}}>\r\n            <Tooltip title = {'Edit row'}>\r\n              <EditTwoTone twoToneColor=\"orange\" style={{fontSize:\"1.5em\", paddingRight:\"0.5em\"}}/>\r\n            </Tooltip>\r\n          </Typography.Link>\r\n          <Typography.Link disabled={editingKey !== ''}  onClick={() => newPdf(record)} style={{color: \"dodgerblue\"}}>\r\n            <Tooltip title = {'Generate PDF'}>\r\n              <FilePdfTwoTone twoToneColor=\"blue\" style={{fontSize:\"1.5em\", paddingRight:\"0.5em\"}} />\r\n            </Tooltip>\r\n          </Typography.Link>\r\n          <Typography.Link disabled={editingKey !== ''} style={{color: \"dodgerblue\"}}>\r\n            <Popconfirm title=\"Remove this row?\" onConfirm={() => remove(record)} okText=\"Confirm\" cancelText=\"Cancel\">\r\n              <Tooltip title = {'Delete row'}>\r\n                <DeleteTwoTone twoToneColor=\"red\" style={{fontSize:\"1.5em\", }}/>\r\n              </Tooltip>\r\n            </Popconfirm>\r\n          </Typography.Link>\r\n          </span>\r\n);\r\n      },\r\n    },\r\n  ];\r\n  const logVendor = (value) => {\r\n    console.log(value)\r\n  }\r\n  const mergedColumns = columns.map((col) => {\r\n    if (!col.editable) {\r\n      return col;\r\n    }\r\n\r\n    return {\r\n      ...col,\r\n      onCell: (record) => ({\r\n        record,\r\n        dataIndex: col.dataIndex,\r\n        title: col.title,\r\n        editing: isEditing(record),\r\n      }),\r\n    };\r\n  });\r\n  return (\r\n    \r\n    <Form form={form} component={false}>\r\n      <Table id=\"results_table\"\r\n        components={{\r\n          body: {\r\n            cell: EditableCell,\r\n          },\r\n        }}\r\n        bordered\r\n        dataSource={data}\r\n        columns={mergedColumns}\r\n        rowClassName=\"editable-row\"\r\n        pagination={false} \r\n        style={{zIndex:\"-1\"}}\r\n      />\r\n    </Form>\r\n    \r\n  );\r\n};\r\n\r\n","import {createContext} from \"react\";\r\n\r\nconst AllProductsContext = createContext();\r\n\r\nexport default AllProductsContext;","import {createContext} from \"react\";\r\n\r\n\r\nconst AuthContext = createContext(\r\n    {\r\n  isAuthenticated: false, // User is not logged in by default\r\n  setIsAuthenticated: () => {} // Provide a function to modify context\r\n}\r\n\r\n);\r\n\r\nexport default AuthContext;","import React, {useState, useEffect, useRef, useContext} from \"react\";\r\nimport {ProductList, ProductQtyInput, ProductListItem, SetProductBtn, ProductForm } from \"../components/ProductList\"\r\nimport OrderTable from \"../components/OrderTable\"\r\nimport API from \"../utils/API\"\r\nimport AllProductsContext from '../components/AllProductsContext';\r\nimport { Button, Form, Select, InputNumber, message, Divider, Layout, Space, Row, Col} from 'antd';\r\nimport { PlusOutlined } from '@ant-design/icons';\r\nimport AuthContext from '../components/AuthContext'\r\nimport _ from 'lodash';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport { useSpring, animated } from 'react-spring';\r\n\r\n\r\nconst { Content } = Layout;\r\nfunction Calculation() {\r\n    // const [allProducts, setAllProducts] = useState()\r\n    // const value = {allProducts, setAllProducts}\r\n    // Load data\r\n    const layout = {\r\n        labelCol: {\r\n          span: 8,\r\n        },\r\n        wrapperCol: {\r\n          span: 16,\r\n        },\r\n      };\r\n      const tailLayout = {\r\n        wrapperCol: {\r\n          offset: 1,\r\n          span: 5,\r\n        },\r\n      };\r\n\r\n    useEffect (() => {\r\n        loadVendors()\r\n    }, [])\r\n    useEffect (() => {\r\n        loadProducts()\r\n    }, [])\r\n    const qtyInput = useRef(null)\r\n    const productSet = useRef(null)\r\n    // Overage 5%\r\n    const overage = 1.05;\r\n    // Set products state\r\n    const [products, setProducts] = useState([])\r\n    // Set product qty state\r\n    const [quantity, setQuantity] = useState(0)\r\n    // Set vendors \r\n    const [vendors, setVendors] = useState([])\r\n    // Set state for currently selected product\r\n    const [currentProduct, setCurrentProduct] = useState({})\r\n\r\n    const handleCalculation = (selectedP, selectedQ) => {\r\n        if (!selectedP || !selectedQ){\r\n            console.log(\"no data\")\r\n            message.warning('Please complete all fields below')\r\n            return\r\n        }\r\n\r\n        loadProducts()\r\n        setQuantity(selectedQ)\r\n        // Object to store the modified product object\r\n        let selectedProduct;\r\n        // loops through all product to find the matching one by key and set as current product\r\n        products.forEach(product => {\r\n            console.log(\"count\")\r\n            console.log(products)\r\n            console.log(product.key)\r\n            console.log(selectedP)\r\n            // If the key matches, store properties in the selectProduct -> productSet.current.value \r\n            if (product.key === selectedP ) {\r\n                console.log(\"product.key\")\r\n                selectedProduct = product\r\n                // Add new property (total_price) to every raw material\r\n                selectedProduct.formulation.forEach(rm => {\r\n                    // 1.05 * 1 *20 * 150 * 1000\r\n                    // bottle/box:\r\n                    // 1.05 * 1 * 20 * 0.05 = 1\r\n                    rm.quantity = (overage * selectedQ * product.qtyPerPack * rm.coefficient).toFixed(2)\r\n\r\n                    // Divide the quantity unity by 1000000 - convert mg (calculated above) to kg, for weight units only\r\n                    const conversionFactor = 1000000\r\n                    if (rm.unit.toUpperCase() === 'KG') {\r\n                        rm.quantity = (rm.quantity/conversionFactor).toFixed(2);\r\n                    };\r\n                    // Calculate total price \r\n                    rm.total_price =  (rm.quantity * rm.unit_price).toFixed(2)                   \r\n                })\r\n            \r\n            \r\n\r\n            // set the modified object as the current product\r\n            setCurrentProduct(selectedProduct)\r\n        }\r\n        })\r\n        \r\n    }\r\n\r\n \r\n    async function loadProducts () {\r\n        API.getProducts ()\r\n        .then(res => {\r\n            setProducts(res.data);\r\n            // setAllProducts(res.data)\r\n            }\r\n        )\r\n          .catch(err => console.log(err));\r\n    }\r\n    \r\n    async function loadVendors () {\r\n        API.getVendors ()\r\n        .then(res => {\r\n            setVendors(res.data);\r\n            }\r\n        )\r\n          .catch(err => console.log(err));\r\n    }\r\n\r\n    const handleAdd = () => {\r\n        const newRow = {\r\n          key: '',\r\n          name: '',\r\n          quantity: '',\r\n          unit: '',\r\n          unit_price: '',\r\n          total_price: '',\r\n          vendor_name:''\r\n        };\r\n        // cloning current product for setCurrentProduct to detect new object and trigger rerendering\r\n        const clone = obj => Object.assign({}, ...obj);\r\n        const addRmProduct = clone([currentProduct]);\r\n\r\n        addRmProduct.formulation = [...addRmProduct.formulation, {...newRow}]\r\n        // const currentRows = [...currentProduct.formulation]\r\n        setCurrentProduct(addRmProduct)\r\n      };\r\n      console.log(products)\r\n\r\n      // transition style\r\n      const springStyle = useSpring({ to: { opacity: 1 }, from: { opacity: 0 }, config:{ duration: 2000 }})\r\n      \r\n    return (\r\n        // <AllProductsContext.Provider value={value}>\r\n            <Layout style={{ minHeight: '100vh',minWidth: '100vh' }}>\r\n              <Content style={{minWidth : \"60%\", marginTop:\"3em\", marginLeft:\"auto\", marginRight:\"auto\"}}>\r\n                <Paper variant=\"outlined\" style={{padding: \"3em 6em\"}}> \r\n                  \r\n                  {/* <animated.div style={springStyle}>I will fade in</animated.div> */}\r\n                  <Form {...layout} onFinish={({selectedPt, selectedQty}) => {handleCalculation(selectedPt, selectedQty)}}>\r\n                  <h1 style={{color: \"rgb(8, 105, 124)\", fontFamily:\"Arial\"}}>Enter product information below:</h1>\r\n                  <br/>\r\n                  <Form.Item>\r\n                    <Row gutter={{xs:400 , md: 100 , lg:100}}>\r\n                      <Col >\r\n                        <Form.Item  {...tailLayout} label=\"Product code:\" name=\"selectedPt\" style={{fontFamily:\"Arial\"}} >\r\n                          <Select style={{ width: \"12em\"}}\r\n                        dropdownMatchSelectWidth={false}\r\n                        dropdownRender={menu => (\r\n                            <div>\r\n                              {menu}\r\n                              <Divider style={{ margin: '4px 0' }} />\r\n                              <div >\r\n                                <a\r\n                                  style={{ flex: 'none', padding: '8px', display: 'block', cursor: 'pointer' }}\r\n                                  href=\"/addproduct\"\r\n                                >\r\n                                  <PlusOutlined /> New Product\r\n                                </a>\r\n                              </div>\r\n                            </div>\r\n                          )}\r\n                          placeholder=\"Select code\">\r\n                        {products.map(product => (\r\n                            <Select.Option key={product.key}>{product.key}</Select.Option>\r\n                        ))}\r\n                        </Select>\r\n                        </Form.Item>\r\n                      </Col>\r\n                      <Col >\r\n                        <Form.Item  {...tailLayout} label=\"Package quantity:\"name=\"selectedQty\" tooltip=\"E.g for 5000 bottles/boxes of blisters, enter 5000.\" style={{fontFamily:\"Arial\"}} >\r\n                            <InputNumber placeholder=\"Enter Qty\" min='0'style={{ width: 200}}/>\r\n                        </Form.Item>\r\n                      </Col>\r\n                      <Col >\r\n                      <Form.Item >\r\n                        <Button size=\"large\" htmlType=\"submit\" style={{backgroundColor:\"rgb(8, 105, 124)\", color:\"white\", borderColor: \"rgb(8, 105, 124)\"}} >\r\n                          Calculate\r\n                      </Button>\r\n                      </Form.Item>\r\n                      </Col>\r\n                    </Row>\r\n                    {!_.isEmpty(currentProduct)? <h2 style={{fontFamily:\"Arial\"}}> {currentProduct.name}</h2>:<></>}\r\n                  </Form.Item>\r\n                  </Form>\r\n            </Paper>\r\n            <div style={{marginTop:\"2%\"}}>\r\n              {currentProduct !== 0 ?<Paper variant=\"outlined\" style={{padding: \"2em 2em\"}}>  <OrderTable >{{currentProduct, vendors}} </OrderTable></Paper> : <></>} \r\n            </div>\r\n            </Content>\r\n\r\n\r\n        {/* <ProductQtyInput ref={qtyInput} value={quantity}></ProductQtyInput> */}\r\n   \r\n      \r\n        {/* {!_.isEmpty(currentProduct) ?\r\n        <Button onClick={handleAdd} type=\"primary\" style={{ marginBottom: 16 }}>\r\n          Add a row\r\n        </Button> :\r\n        <></>}  */}\r\n        </Layout>  \r\n        // </AllProductsContext.Provider>\r\n    );\r\n}\r\n\r\nexport default Calculation","import React from \"react\";\r\nimport './index.css';\r\nimport { Form, Input, Button, Checkbox } from 'antd';\r\nimport { UserOutlined, LockOutlined } from '@ant-design/icons';\r\nexport default function  ({onFinish, onFinishFailed, ...props}) {\r\n\r\n    return (\r\n        <> \r\n        \r\n        <Form\r\n            name=\"normal_login\"\r\n            className=\"login-form\"\r\n            initialValues={{\r\n              remember: true,\r\n            }}\r\n            onFinish={onFinish}\r\n            onFinishFailed={onFinishFailed}\r\n            style={{border:\"solid #f1f1f1\", padding:\"3em\", minWidth:\"30%\", marginTop: \"3em\"}}\r\n          >   <h1 style={{color: \"rgb(8, 105, 124)\", fontFamily:\"Arial\"}}>Login: </h1>\r\n              <p style={{color: \"rgb(8, 105, 124)\", fontFamily:\"Arial\"}}>No Registration available. Please use:</p>\r\n              <p>Email: c1@email.com</p><p> Password: 111</p>\r\n            <Form.Item\r\n              name=\"email\"\r\n              rules={[\r\n                {\r\n                  required: true,\r\n                  message: 'Please input your Email!',\r\n                },\r\n              ]}\r\n            >\r\n              <Input prefix={<UserOutlined className=\"site-form-item-icon\" />} placeholder=\"Email\" />\r\n            </Form.Item>\r\n            <Form.Item\r\n              name=\"password\"\r\n              rules={[\r\n                {\r\n                  required: true,\r\n                  message: 'Please input your Password!',\r\n                },\r\n              ]}\r\n            >\r\n              <Input\r\n                prefix={<LockOutlined className=\"site-form-item-icon\" />}\r\n                type=\"password\"\r\n                placeholder=\"Password\"\r\n              />\r\n            </Form.Item>\r\n            <Form.Item>\r\n\r\n            </Form.Item>\r\n            <Button type=\"primary\" htmlType=\"submit\" className=\"login-form-button\">\r\n                Log in\r\n            </Button>\r\n            </Form>\r\n    </>\r\n    )\r\n}\r\n","import React, {useContext} from 'react';\r\nimport ReactDOM, { useLocation } from 'react-dom';\r\nimport { useHistory } from 'react-router-dom';\r\nimport 'antd/dist/antd.css';\r\nimport './index.css';\r\nimport API from '../utils/API'\r\nimport LoginFormContainer from '../components/LoginForm';\r\n\r\nexport default function Login () {\r\n     const history = useHistory();\r\n     console.log(history)\r\n    async function onFinish (loginData) {\r\n      console.log('history', history)\r\n      API.login(loginData)\r\n        .then(response => {\r\n          console.log(response)\r\n          if (response.data._id) {\r\n            history.go(history.location.pathname)\r\n          } else {\r\n            console.log(\"Error logging in\");\r\n          }\r\n        }).catch(err => {\r\n          console.log(err);\r\n        }\r\n        );\r\n    };\r\n\r\n    const onFinishFailed = (errorInfo) => {\r\n      console.log('Failed:', errorInfo);\r\n    };\r\n\r\n    return <LoginFormContainer onFinish={onFinish} onFinishFailed={onFinishFailed}/>\r\n\r\n}","import React from \"react\";\r\n\r\nfunction NoMatch() {\r\n  return <h1>404 Page Not Found</h1>\r\n\r\n}\r\n\r\nexport default NoMatch;\r\n","import React, {useContext} from \"react\";\r\nimport { Menu, Layout} from \"antd\";\r\nimport AuthContext from \"../AuthContext\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport API from \"../../utils/API\";\r\nfunction Nav() {\r\n  const history = useHistory();\r\n  const {isAuthenticated} = useContext(AuthContext)\r\n  const userLogOut = () => {\r\n    API.logout()\r\n    history.go(0)\r\n  }\r\n  const { Sider } = Layout;\r\n\r\n  const navItem ={\r\n    fontWeight: \"bold\", fontSize:\"large\"\r\n  }\r\n  return (\r\n    <React.Fragment>\r\n\r\n      <Sider\r\n      style={{position:\"fixed\", zIndex: \"2\", height: \"100vh\"}}\r\n      theme=\"dark\"\r\n      breakpoint=\"xxl\"\r\n      collapsedWidth=\"0\"\r\n      onBreakpoint={broken => {\r\n        console.log(broken);\r\n      }}\r\n      onCollapse={(collapsed, type) => {\r\n        console.log(collapsed, type);\r\n      }}\r\n    >\r\n      <Menu theme=\"dark\">\r\n      <h3 style={{marginTop: \"2em\", color: \"#13c2c2\", fontFamily:\"Arial\", minWidth:\"10em\"}}>PO Generator</h3>\r\n      <Menu.Item key=\"0\">\r\n        <a style={navItem} href=\"/\">Generate PO</a>\r\n      </Menu.Item>\r\n      <Menu.Item key=\"1\">\r\n        <a style={navItem} href=\"/addproduct\">Add Product</a>\r\n      </Menu.Item>\r\n\r\n \r\n      {isAuthenticated ?\r\n      <Menu.Item key=\"3\"onClick={userLogOut} >\r\n        <a style={navItem} href=\"#\">Log Out</a>\r\n      </Menu.Item>:\r\n      <Menu.Item key=\"2\">\r\n        <a style={navItem} href=\"/login\">Log In</a>\r\n      </Menu.Item>\r\n      }\r\n     \r\n    </Menu>\r\n    </Sider>\r\n\r\n    </React.Fragment>\r\n    \r\n  );\r\n}\r\n\r\nexport default Nav;\r\n","import React,{useState, useContext, useEffect} from \"react\";\nimport {   BrowserRouter,\n  Switch,\n  Route,\n  Link,\n  Redirect,\n  useHistory,\n  useLocation} from \"react-router-dom\";\nimport AddProduct from \"./pages/AddProduct\";\nimport Calculation from \"./pages/Calculation\";\nimport Login from \"./pages/Login\";\nimport NoMatch from \"./pages/NoMatch\";\nimport Nav from \"./components/Nav\";\nimport AuthContext from './components/AuthContext';\nimport API from './utils/API';\nimport { Layout } from \"antd\";\n\nfunction App() {\n  const [isAuthenticated, setIsAuthenticated ] = useState(true);\n  const value = { isAuthenticated, setIsAuthenticated };\n\n  // We check if user is already logged in, and if they are then we set isAuthenticated to true\n  useEffect(() => {\n    API.userLoggedIn().then(response => {\n      console.log(response)\n      // setIsAuthenticated(response.data.isAuthenticated)\n      setIsAuthenticated(response.data.isAuthenticated)\n    })\n  }, []);\n\n\n  return (\n    <AuthContext.Provider value={value}>\n        <BrowserRouter>\n        <Layout>\n            <Nav/>\n            <Switch>\n              <Route exact path= {[\"/\"]}>\n              {isAuthenticated ?  \n                <Calculation/>:<Login/>} \n              </Route>\n              <Route exact path= {[\"/login\"]}> \n                <Login/>\n              </Route>\n              <Route exact path= {[\"/addproduct\"]} > \n                {isAuthenticated ?  \n                <AddProduct/>:<Login/>}\n              </Route>\n              <Route exact path= {[\"/logout\"]}>\n                <AddProduct/>\n              </Route>\n              <Route>\n                <NoMatch/>\n              </Route>\n            </Switch>\n          </Layout>\n      </BrowserRouter>\n    </AuthContext.Provider>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <App />,document.getElementById('root')\n);\n\n"],"sourceRoot":""}